/**
 * Licensed under MIT License (see LICENSE file)
 * (c) 2018 Michal Novak, it.novakmi@gmail.com
 *
 * Example how to build full docker Linux development environment accessible with Ssh.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.8'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

version = "0.4.0"
println "Docker gradle helper script ver. ${version}"

apply plugin: 'base'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.github.ben-manes.versions' // gradle -b docker.gradle dependencyUpdates -Drevision=release
// Include docker related closures for build of docker linux images (reuse) form bintray repo
apply from: "https://bintray.com/novakmi/UxDockerClosures/download_file?file_path=0.4.0/UxDockerClosures.gradle"
//apply from: "https://raw.githubusercontent.com/novakmi/mini/master/config/docker/UxDockerClosures.gradle" // or from github
//apply from: "./UxDockerClosures.gradle" // or include from local file

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

def maintainerId = 'Michal Novak "it.novakmi@gmail.com"'

/* Linux development image*/
task createLinuxDevDockerfile(type: Dockerfile) {
    ext.BASE_IMAGE_TAG = getPropUxDkCl("BASE_IMAGE_TAG", "ubuntu:18.04")
    ext.IMAGE_TAG = getPropUxDkCl("IMAGE_TAG", "linuxdev")
    ext.ROOT_PASS = getPropUxDkCl("ROOT_PASS", "docker")
    destFile = project.file("build/linuxdevfile/${ext.IMAGE_TAG}.dockerfile")
    from ext.BASE_IMAGE_TAG 
    maintainer maintainerId

    setupBuildUtilsUxDkCl(delegate)
    setupUtilsUxDkCl(delegate)
    setupNetworkUtilsUxDkCl(delegate)
    setupSshRootAccessUxDkCl(delegate, ext.ROOT_PASS)
    addLocalUserUxDkkCl(delegate, "michal")
    exposePort 22
    defaultCommandSshUxDkCl(delegate)
    doFirst {
        installSshKeyUxDkCl(delegate, INSTALL_SSH_KEY_UXDKCL, ["root", "michal"] as Set)
        println "Configuration used to create Linux Development Docker image:"
        println "IMAGE_TAG: ${ext.IMAGE_TAG} BASE_IMAGE_TAG: ${ext.BASE_IMAGE_TAG}"
    }
}

task buildLinuxDevImage(type: DockerBuildImage) {
    dependsOn createLinuxDevDockerfile
    dockerFile = createLinuxDevDockerfile.destFile
    inputDir = dockerFile.parentFile
    tag = createLinuxDevDockerfile.IMAGE_TAG
}
